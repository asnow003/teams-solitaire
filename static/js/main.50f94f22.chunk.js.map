{"version":3,"sources":["scripts/canvasMouseEvent.tsx","scripts/canvasGame.tsx","scripts/canvasGameSettings.tsx","scripts/canvasPosition.tsx","scripts/canvasBehavior.tsx","scripts/canvasBehaviorGroup.tsx","scripts/canvasScene.tsx","scripts/canvasBoxCollider.ts","objects/Solitaire/CardStack.tsx","objects/Solitaire/PlayStack.ts","objects/Solitaire/Card.tsx","objects/Solitaire/DrawStack.tsx","objects/Solitaire/PickStack.tsx","objects/Solitaire/AceStack.ts","objects/Solitaire/RestartButton.ts","objects/Solitaire/SolitaireGame.tsx","objects/Solitaire/Solitaire.tsx","components/Tab.tsx","components/App.tsx","index.tsx"],"names":["CanvaseMouseEventType","CanvasGame","settings","scenes","activeSceneId","isRunning","canvas","context","resizeTimer","resizeCanvas","clearTimeout","setTimeout","reload","isMaximized","style","background","width","document","documentElement","clientWidth","height","clientHeight","backgroundColor","run","update","window","requestAnimationFrame","this","getElementById","canvasId","getContext","forEach","s","changeScene","sceneId","restart","addEventListener","event","mousePos","getMousePosition","type","Click","onMouseEvent","Down","Up","Move","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","scaleX","leftOffset","scaleY","topOffset","undefined","init","start","pause","unPause","stop","gridSpacing","save","globalAlpha","intervalsY","Solitaire","gameHeight","i","beginPath","strokeStyle","moveTo","lineTo","gameWidth","stroke","intervalsX","j","restore","clearRect","scale","translate","fillStyle","fillRect","isDebug","drawGrid","CanvasGameSettings","playAreaWidth","playAreaHeight","updateSettings","screenWidth","screenHeight","scaledScreenWidth","scaledScreenHeight","CanvasPosition","CanvasBehavior","id","dragOffsetPosition","_id","_mouseInArea","_isDragging","_isMoving","_moveSpeed","_moveToPosition","_visible","_isClickable","_isDragable","_left","_top","_width","_height","_group","_collider","value","Left","Top","Width","Height","onDragStop","onDrop","setMouseCursorDragging","newLeft","newTop","onDragging","Visible","IsClickable","setMouseCursorClickable","IsDragable","setMouseCursorDragable","onDragStart","onDrag","onClick","resetMouseCursor","behavior","cursor","onCursorChange","atX","atY","xDistance","Math","abs","yDistance","speedX","speedY","directionX","directionY","onMoved","onMoving","position","speed","onMove","w","h","r","arc","PI","closePath","text","size","font","fillText","CanvasBehaviorGroup","_behaviors","Array","Group","push","index","indexOf","splice","behaviors","CanvasScene","collisions","draggingItem","currentInAreaBehavior","Collider","existingCollisions","Id","b","Enabled","hasCollided","onCollisionEnter","length","onCollisionLeave","emitBehaviorStart","Behaviors","cb","emitBehaviorStop","onUpdate","emitCollisions","IsDragging","emitBehaviorUpdate","c","onMouse","inAreaBehavior","sendDraggingMouseEvents","hasCollidedAtPoint","onLeave","onEnter","item","CanvasBoxCollider","_enabled","c1","c2","collider","checkCollisionPoints","CardStack","_isHighlighted","cardWidth","cardHeight","card","roundedRect","fill","lineWidth","IsHighlighted","setLineDash","createText","round","count","fromBotton","returnCards","shift","pop","onDrawCards","updateStack","lastCard","Card","NextCard","PreviousCard","add","cardStack","addCard","removeCard","remove","cards","PlayStack","_isReady","topCard","TopCard","Rank","IsRed","canAddCard","IsReady","IsFaceUp","colliderHeight","colliderWidth","ParentStackIsPlay","prevItem","offset","nextItem","testHeight","testWidth","suit","rank","_suit","_rank","_isFaceUp","_previousCard","_nextCard","_parentStackIsPlay","origPosition","suitString","valueString","toString","loopCard","reset","lastCollision","cardsToAdd","removeCards","addCards","SolitaireGame","Moves","collisionIndex","img","drawImage","Description","DrawStack","drawCards","squareWidth","draw","PickStack","startIndex","AceStack","Suit","IsAce","HasCards","RestartButton","leftMargin","topMargin","columnMargin","rowMargin","drawStack","pickStack","aceStack1","aceStack2","aceStack3","aceStack4","stack1","stack2","stack3","stack4","stack5","stack6","stack7","playStacks","isPaused","interval","clearInterval","setInterval","updateTimer","getRowPosition","getColumnPosition","addBehavior","NumberOfCards","restartButton","shuffle","startStackIndex","stack","TotalSeconds","array","floor","random","seconds","minutes","dialogLeft","dialogTop","clockImg","getTimerDisplay","movesImg","isCompleteStack","gameWon","loadCardImages","path","images","Image","src","appendChild","ace1","ace2","ace3","ace4","addImage","Tab","props","solitaire","updateTheme","themeStr","beforeUnload","readyToUnload","state","microsoftTeams","setState","notifyAppLoaded","React","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.50f94f22.chunk.js","sourcesContent":["export enum CanvaseMouseEventType {\n    Move,\n    Down,\n    Up,\n    Hover,\n    Click\n}\n\nexport interface CanvaseMouseEvent {\n    x: number;\n    y: number;\n    type: CanvaseMouseEventType | undefined;\n}","import { Solitaire } from \"../objects/Solitaire/Solitaire\";\nimport { CanvasGameSettings } from \"./canvasGameSettings\";\nimport { CanvaseMouseEvent, CanvaseMouseEventType } from \"./canvasMouseEvent\";\nimport { CanvasScene } from \"./canvasScene\";\n\nexport class CanvasGame {\n    protected isRunning: boolean = false;\n\n    private settings: CanvasGameSettings;\n    private canvas: HTMLCanvasElement | undefined;\n    private context: CanvasRenderingContext2D | undefined;\n\n    private resizeTimer: NodeJS.Timer | undefined;\n    private scenes: Array<CanvasScene>;\n    private activeSceneId: string;\n\n    constructor(settings: CanvasGameSettings, scenes: Array<CanvasScene>, activeSceneId: string) {\n        this.settings = settings;\n        this.scenes = scenes;\n        this.activeSceneId = activeSceneId;\n    }\n\n    private init(): CanvasRenderingContext2D {\n        this.canvas = document.getElementById(this.settings.canvasId) as HTMLCanvasElement;\n        this.context = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n        this.scenes.forEach((s) => {\n            s.changeScene = (sceneId: string) => {\n                this.changeScene(sceneId);\n            }\n            s.restart = () => {\n                this.restart();\n            }\n        });\n\n        this.canvas.addEventListener('click', (event) => {\n            const mousePos = this.getMousePosition(event);\n            if (mousePos) {\n                this.scenes.forEach((s) => {\n                    mousePos.type = CanvaseMouseEventType.Click;\n                    s.onMouseEvent(mousePos);\n                });\n            }\n        }, false);\n\n        this.canvas.addEventListener('mousedown', (event) => {\n            const mousePos = this.getMousePosition(event);\n            if (mousePos) {\n                this.scenes.forEach((s) => {\n                    mousePos.type = CanvaseMouseEventType.Down;\n                    s.onMouseEvent(mousePos);\n                });\n            }\n        }, false);\n\n        this.canvas.addEventListener('mouseup', (event) => {\n            const mousePos = this.getMousePosition(event);\n            if (mousePos) {\n                mousePos.type = CanvaseMouseEventType.Up;\n                this.scenes.forEach((s) => {\n                    s.onMouseEvent(mousePos);\n                });\n            }\n        }, false);\n\n        this.canvas.addEventListener('mousemove', (event) => {\n            const mousePos = this.getMousePosition(event);\n            if (mousePos) {\n                mousePos.type = CanvaseMouseEventType.Move;\n                this.scenes.forEach((s) => {\n                    s.onMouseEvent(mousePos);\n                });\n            }\n        }, false);\n\n        window.addEventListener(\"resize\", this.resizeCanvas, false);\n\n        this.resizeCanvas();\n\n        return this.context;\n    }\n\n    private resizeCanvas = () => {\n\n        if (this.resizeTimer) {\n            clearTimeout(this.resizeTimer);\n        }\n\n        this.resizeTimer = setTimeout(() => {\n      \n            if (this.canvas) {\n                this.settings.reload();\n                \n                if (this.settings.isMaximized) {\n                    // excess background color\n                    this.canvas.style.background = \"#f3f2f1\";\n    \n                    this.canvas.width = document.documentElement.clientWidth;\n                    this.canvas.height = document.documentElement.clientHeight;\n                } else {\n                    this.canvas.style.background = this.settings.backgroundColor;\n                    this.canvas.width = this.settings.width;\n                    this.canvas.height = this.settings.height;\n                }\n            }\n                  \n        }, 250);\n    }\n\n    private getMousePosition(event: MouseEvent): CanvaseMouseEvent | undefined {\n        if (this.canvas) {\n            const rect = this.canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n\n            return {\n                x: x / this.settings.scaleX - this.settings.leftOffset,\n                y: y / this.settings.scaleY - this.settings.topOffset,\n                type: undefined\n            };\n        }\n\n        return;\n    }\n\n    public start() {\n        const context = this.init();\n\n        this.isRunning = true;\n\n        this.scenes.forEach((s) => {\n            if (s.sceneId === this.activeSceneId) {\n                s.start(this.settings, context);\n            }\n        });\n\n        this.run();\n    }\n\n    public pause() {\n        this.isRunning = false;\n\n        this.scenes.forEach((s) => {\n            if (s.sceneId === this.activeSceneId) {\n                s.pause();\n            }\n        });\n    }\n\n    public unPause() {\n        if (!this.isRunning) {\n            this.isRunning = true;\n\n            this.scenes.forEach((s) => {\n                if (s.sceneId === this.activeSceneId) {\n                    s.unPause();\n                }\n            });\n\n            this.run();\n        }\n    }\n\n    public restart() {\n        this.stop();\n        this.start();\n    }\n\n    public stop() {\n        this.isRunning = false;\n        \n        if (this.context) {\n            this.scenes.forEach((s) => {\n                if (s.sceneId === this.activeSceneId) {\n                    s.stop(this.context!);\n                }\n            });\n        }\n    }\n\n    public changeScene(sceneId: string) {\n        this.scenes.forEach((s) => {\n            if (s.sceneId === sceneId) {\n                this.stop();\n                this.activeSceneId = sceneId;\n                this.start();\n            }\n        });\n    }\n\n    public updateSettings() {\n        this.settings.reload();\n    }\n\n    private drawGrid(gridSpacing: number) {\n        if (this.context) {\n            this.context.save();\n            this.context.globalAlpha = 0.2;\n            const intervalsY = Solitaire.gameHeight / gridSpacing;\n            for (var i = 1; i < intervalsY; i++) {\n                this.context.beginPath();\n                this.context.strokeStyle = \"red\";\n                this.context.moveTo(0, i * gridSpacing);\n                this.context.lineTo(Solitaire.gameWidth, i * gridSpacing);\n                this.context.stroke();\n            }\n\n            const intervalsX = Solitaire.gameWidth / gridSpacing;\n            for (var j = 1; j < intervalsX; j++) {\n                this.context.beginPath();\n                this.context.strokeStyle = \"blue\";\n                this.context.moveTo(j * gridSpacing, 0);\n                this.context.lineTo(j * gridSpacing, Solitaire.gameHeight);\n                this.context.stroke();\n            }\n            this.context.restore();\n        }\n    }\n\n    private update(context: CanvasRenderingContext2D) {\n        if (this.canvas) {\n            // clear the screen\n            \n            context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            context.save();\n            this.isRunning = true;\n\n            context.scale(this.settings.scaleX, this.settings.scaleY);\n            context.translate(this.settings.leftOffset, this.settings.topOffset);\n\n            // if maximized show the scaled/offset play area\n            if (this.settings.isMaximized) {\n                context.fillStyle = this.settings.backgroundColor;\n                context.fillRect(\n                    0,\n                    0,\n                    Solitaire.gameWidth,\n                    Solitaire.gameHeight);\n            }\n\n            if (Solitaire.isDebug) {\n                this.drawGrid(25);\n            }\n\n            this.scenes.forEach((s) => {\n                if (s.sceneId === this.activeSceneId) {\n                    s.update(context);\n                }\n            });\n\n            context.restore()\n        }\n    }\n\n    private run = () => {\n        if (this.isRunning) {\n            if (this.context) {\n                this.update(this.context);\n            }\n            window.requestAnimationFrame(this.run);\n        }\n    }\n}\n","export class CanvasGameSettings {\n    public playAreaWidth: number;\n    public playAreaHeight: number;\n\n    public width: number;\n    public height: number;\n    public isMaximized: boolean;\n    public backgroundColor: string;\n\n    public canvasId: string;\n    public leftOffset: number = 0;\n    public topOffset: number = 0;\n\n    public scaleX: number = 1;\n    public scaleY: number = 1;\n\n    constructor(canvasId: string, playAreaWidth: number, playAreaHeight: number, isMaximized: boolean, backgroundColor: string) {\n        this.playAreaWidth = playAreaWidth;\n        this.playAreaHeight = playAreaHeight;\n\n        this.canvasId = canvasId;\n        this.width = playAreaWidth;\n        this.height = playAreaHeight;\n        this.isMaximized = isMaximized;\n        this.backgroundColor = backgroundColor;\n\n        this.updateSettings();\n    }\n\n    private updateSettings() {\n        let screenWidth = document.documentElement.clientWidth;\n        let screenHeight = document.documentElement.clientHeight;\n    \n        this.scaleX = 1;\n        this.scaleY = 1;\n        this.leftOffset = 0;\n        this.topOffset = 0;\n    \n        if (this.isMaximized) {\n            var scaledScreenWidth = screenWidth;\n            var scaledScreenHeight = screenHeight;\n\n            if (screenWidth > screenHeight) {\n                scaledScreenWidth = (screenHeight * this.playAreaWidth) / this.playAreaHeight;\n                this.leftOffset = (screenWidth - scaledScreenWidth) / 2;\n            } else {\n                scaledScreenHeight = (screenWidth * this.playAreaHeight) / this.playAreaWidth;\n                this.topOffset = (screenHeight - scaledScreenHeight) / 2;\n            }\n\n            this.width = scaledScreenWidth;\n            this.height = scaledScreenHeight;\n\n            this.scaleX = scaledScreenWidth / this.playAreaWidth;\n            this.scaleY = scaledScreenHeight / this.playAreaHeight;\n\n            this.leftOffset = this.leftOffset / this.scaleX;\n            this.topOffset = this.topOffset / this.scaleY;\n        }\n\n        // console.log(`Settings:\\nScale X: ${this.scaleX}\\nScale Y: ${this.scaleY}\\nScreen: ${screenWidth}w x ${screenHeight}h\\nLeft: ${this.leftOffset}, Top: ${this.topOffset}\\nArea: ${this.width}w x ${this.height}h`);\n    }\n\n    public reload() {\n        // console.log(\"Refreshing settings...\");\n        this.updateSettings();\n    }\n}","export class CanvasPosition {\n    public x: number;\n    public y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}","import { CanvasBehaviorGroup } from \"./canvasBehaviorGroup\";\nimport { CanvasBoxCollider } from \"./canvasBoxCollider\";\nimport { CanvasGameSettings } from \"./canvasGameSettings\";\nimport { CanvaseMouseEvent, CanvaseMouseEventType } from \"./canvasMouseEvent\";\nimport { CanvasPosition } from \"./canvasPosition\";\n\nexport abstract class CanvasBehavior {\n\n    private settings: CanvasGameSettings | undefined;\n    private dragOffsetPosition: CanvasPosition | undefined;\n\n    private _id: string;\n    get Id(): string {\n        return this._id;\n    }\n\n    private _mouseInArea: boolean = false;\n\n    private _isDragging: boolean = false;\n    get IsDragging(): boolean {\n        return this._isDragging;\n    }\n\n    private _isMoving: boolean = false;\n    get IsMoving(): boolean {\n        return this._isMoving;\n    }\n\n    private _moveSpeed: number = 10;\n    private _moveToPosition: CanvasPosition | undefined;\n\n    private _visible: boolean = true;\n    get Visible(): boolean {\n        return this._visible;\n    }\n    set Visible(value: boolean) {\n        this._visible = value;\n    }\n\n    private _isClickable: boolean = false;\n    get IsClickable(): boolean {\n        return this._isClickable;\n    }\n    set IsClickable(value: boolean) {\n        this._isClickable = value;\n    }\n\n    private _isDragable: boolean = false;\n    get IsDragable(): boolean {\n        return this._isDragable;\n    }\n    set IsDragable(value: boolean) {\n        this._isDragable = value;\n    }\n\n    protected _left: number = 0;\n    get Left(): number {\n        return this._left;\n    }\n    set Left(value: number) {\n        this._left = value;\n\n        if (this._collider) {\n            this._collider.Left = this._left;\n        }\n    }\n\n    protected _top: number = 0;\n    get Top(): number {\n        return this._top;\n    }\n    set Top(value: number) {\n        this._top = value;\n\n        if (this._collider) {\n            this._collider.Top = this._top;\n        }\n    }\n\n    protected _width: number = 0;\n    get Width(): number {\n        return this._width;\n    }\n    set Width(value: number) {\n        this._width = value;\n\n        if (this._collider) {\n            this._collider.Width = this._width;\n        }\n    }\n\n    protected _height: number = 0;\n    get Height(): number {\n        return this._height;\n    }\n    set Height(value: number) {\n        this._height = value;\n\n        if (this._collider) {\n            this._collider.Height = this._height;\n        }\n    }\n\n    private _group: CanvasBehaviorGroup | undefined;\n    get Group(): CanvasBehaviorGroup | undefined {\n        return this._group;\n    }\n    set Group(value: CanvasBehaviorGroup | undefined) {\n        this._group = value;\n    }\n\n    private _collider: CanvasBoxCollider | undefined;\n    get Collider(): CanvasBoxCollider | undefined {\n        return this._collider;\n    }\n    set Collider(value: CanvasBoxCollider | undefined) {\n        this._collider = value;\n    }\n\n    constructor(id: string) {\n        this._id = id;\n    }\n\n    abstract start(context: CanvasRenderingContext2D): void;\n    abstract stop(context: CanvasRenderingContext2D): void;\n    abstract update(context: CanvasRenderingContext2D): void;\n\n    public onMouse(event: CanvaseMouseEvent): void {\n        if (event.type === CanvaseMouseEventType.Up) {\n            if (this._isDragging) {\n                this._isDragging = false;\n                this.onDragStop(this);\n                this.onDrop(event);\n            }\n        }\n        \n        if (this._isDragging) {\n            this.setMouseCursorDragging();\n            if (this.dragOffsetPosition) {\n                let newLeft = event.x - this.dragOffsetPosition.x;\n                let newTop = event.y - this.dragOffsetPosition.y;\n\n                if (newLeft < 0) {\n                    newLeft = 0;\n                } else if (this.settings && newLeft > (this.settings.playAreaWidth - this.Width)) {\n                    newLeft = this.settings.playAreaWidth - this.Width;\n                }\n\n                this.Left = newLeft;\n\n                if (newTop < 0) {\n                    newTop = 0;\n                } else if (this.settings && newTop > (this.settings.playAreaHeight - this.Height)) {\n                    newTop = this.settings.playAreaHeight - this.Height;\n                }\n                \n                this.Top = newTop;\n\n                this.onDragging({\n                    x: newLeft,\n                    y: newTop\n                });\n            }\n        }\n\n        if (this.Visible) {\n            if (this.IsClickable) {\n                this.setMouseCursorClickable();\n            }\n\n            if (this.IsDragable && !this._isDragging) {\n                this.setMouseCursorDragable();\n            }\n\n            if (this.IsDragable && event.type === CanvaseMouseEventType.Down) {\n                this.setMouseCursorDragging();\n\n                this.dragOffsetPosition = new CanvasPosition(event.x - this.Left, event.y - this.Top);\n\n                this._isDragging = true;\n\n                this.onDragStart(this);\n                this.onDrag(event);\n            }\n\n            if (this._isClickable && event.type === CanvaseMouseEventType.Down) {\n                event.type = CanvaseMouseEventType.Click;\n                this.onClick(event);\n            }\n\n            if (event.type === CanvaseMouseEventType.Up) {\n               if (this._isDragging) {\n                    this.dragOffsetPosition = undefined;\n                    this._isDragging = false;\n                    this.onDrop(event);\n                }  \n            } \n\n            if (!this._mouseInArea) {\n                this._mouseInArea = true;\n            }\n        } else {\n            if (this._mouseInArea) {\n                this._mouseInArea = false;\n                this.resetMouseCursor();\n            }\n        }\n    };\n\n    onEnter(event: CanvaseMouseEvent): void {};\n    onLeave(event: CanvaseMouseEvent): void {};\n    onClick(event: CanvaseMouseEvent): void {};\n    onMove(event: CanvasPosition): void {};\n    onMoving(event: CanvasPosition): void {};\n    onMoved(): void {};\n    onDrag(event: CanvaseMouseEvent): void {};\n    onDrop(event: CanvaseMouseEvent): void {};\n    onDragging(event: CanvasPosition): void {};\n    onCollisionEnter(behavior: CanvasBehavior | CanvasBehaviorGroup): void {};\n    onCollisionLeave(behavior: CanvasBehavior | CanvasBehaviorGroup): void {};\n\n    onCursorChange(cursor: string): void {};\n    onDragStart(behavior: CanvasBehavior): void {}\n    onDragStop(behavior: CanvasBehavior): void {}\n\n    private setMouseCursorClickable() {\n        this.onCursorChange(\"pointer\");\n    }\n\n    private setMouseCursorDragable() {\n        this.onCursorChange(\"grab\");\n    }\n\n    private setMouseCursorDragging() {\n        this.onCursorChange(\"grabbing\");\n    }\n\n    private resetMouseCursor() {\n        this.onCursorChange(\"auto\");\n    }\n\n    public onUpdate(context: CanvasRenderingContext2D, settings: CanvasGameSettings) {\n        this.settings = settings;\n\n        if (this._moveToPosition) {\n            let atX: boolean = false;\n            let atY: boolean = false;\n\n            const x = this._moveToPosition.x;\n            const xDistance = Math.abs(this.Left - x);\n\n            const y = this._moveToPosition.y;\n            const yDistance = Math.abs(this.Top - y);\n\n            let speedX = this._moveSpeed;\n            let speedY = this._moveSpeed;\n\n            if (xDistance > yDistance) {\n                speedY = (yDistance / xDistance) * speedY;\n            } else {\n                speedX = (xDistance / yDistance) * speedX;\n            }\n\n            if (xDistance > speedX) {\n                const directionX = this.Left < x ? 1 : -1;\n                this.Left = this.Left + (speedX * directionX);\n            } else {\n                atX = true;\n                this.Left = x;\n            }\n\n            if (yDistance > speedY) {\n                const directionY = this.Top < y ? 1 : -1;\n                this.Top = this.Top + (speedY * directionY);\n            } else {\n                atY = true;\n                this.Top = y;\n            }\n\n            if (atX && atY) {\n                this._moveToPosition = undefined;\n                this.onMoved();\n            } else {\n                this.onMoving({\n                    x: this.Left,\n                    y: this.Top\n                });\n            }\n        }\n    }\n\n    public moveTo(position: CanvasPosition, speed: number) {\n        this._moveSpeed = speed;\n        this._moveToPosition = position;\n        this.onMove(position);\n    }\n\n    public roundedRect(context: CanvasRenderingContext2D, x: number, y: number, w: number, h: number, r: number) {\n        context.beginPath();\n        context.arc(x+r, y+r, r, Math.PI, 1.5*Math.PI);\n        context.arc(x+w-r, y+r, r, 1.5*Math.PI, 2*Math.PI);\n        context.arc(x+w-r, y+h-r, r, 0, 0.5*Math.PI);\n        context.arc(x+r, y+h-r, r, 0.5*Math.PI, Math.PI);\n        context.closePath();\n    }\n\n    public createText(context: CanvasRenderingContext2D, text: string, size: number, x: number, y: number) {\n        context.font = `${size}px Arial`;\n        context.fillStyle = \"black\";\n        context.fillText(text, x, y);\n    }\n}","\nimport { CanvasBehavior } from \"./canvasBehavior\";\nimport { CanvaseMouseEvent } from \"./canvasMouseEvent\";\n\nexport class CanvasBehaviorGroup extends CanvasBehavior {\n    private _behaviors: Array<CanvasBehavior> = new Array<CanvasBehavior>();\n\n    get Behaviors(): Array<CanvasBehavior> {\n        return this._behaviors;\n    }\n\n    onEnter(event: CanvaseMouseEvent): void {};\n    onLeave(event: CanvaseMouseEvent): void {};\n    onClick(event: CanvaseMouseEvent): void {};\n    onMoved(): void {};\n    onDrag(event: CanvaseMouseEvent): void {};\n    onDrop(event: CanvaseMouseEvent): void {};\n\n    start(context: CanvasRenderingContext2D): void {};\n    stop(context: CanvasRenderingContext2D): void {};\n    update(context: CanvasRenderingContext2D): void {};\n    onCollisionEnter(behavior: CanvasBehavior | CanvasBehaviorGroup): void {};\n    onCollisionLeave(behavior: CanvasBehavior | CanvasBehaviorGroup): void {};\n\n    public add(behavior: CanvasBehavior) {\n        behavior.Left = this.Left;\n        behavior.Top = this.Top;\n        behavior.Group = this;\n        this._behaviors.push(behavior);\n    }\n\n    public remove(behavior: CanvasBehavior) {\n        const index = this._behaviors.indexOf(behavior);\n        if (index >= 0) {\n            behavior.Group = undefined;\n            this._behaviors.splice(index, 1);\n        }\n    }\n\n    public contains(behavior: CanvasBehavior) {\n        return this._behaviors.indexOf(behavior) >= 0;\n    }\n\n    public reset(): Array<CanvasBehavior> {\n        const behaviors = this._behaviors;\n        this._behaviors = new Array<CanvasBehavior>();\n\n        return behaviors;\n    }\n}","import { CanvasBehavior } from \"./canvasBehavior\";\nimport { CanvasBehaviorGroup } from \"./canvasBehaviorGroup\";\nimport { CanvasGameSettings } from \"./canvasGameSettings\";\nimport { CanvaseMouseEvent } from \"./canvasMouseEvent\";\n\nexport abstract class CanvasScene {\n    public sceneId: string;\n    private behaviors: Array<CanvasBehavior | CanvasBehaviorGroup>;\n\n    private collisions: { [id: string]: Array<CanvasBehavior | CanvasBehaviorGroup> } = {};\n    private draggingItem: CanvasBehavior | CanvasBehaviorGroup | undefined;\n\n    protected settings: CanvasGameSettings | undefined;\n    protected context: CanvasRenderingContext2D | undefined;\n\n    constructor(sceneId: string) {\n        this.sceneId = sceneId;\n        this.behaviors = new Array<CanvasBehavior>();\n    }\n\n    abstract init(context: CanvasRenderingContext2D): void;\n\n    private emitCollisions(behavior: CanvasBehavior) {\n        if (behavior.Collider === undefined) {\n            return;\n        }\n\n        let collisions = new Array<CanvasBehavior | CanvasBehaviorGroup>();\n        const existingCollisions = this.collisions[behavior.Id];\n\n        this.behaviors.forEach((b) => {\n            if (b.Visible && behavior.Id !== b.Id) {\n                if (\n                    behavior.Collider &&\n                    behavior.Collider.Enabled &&\n                    b.Collider &&\n                    b.Collider.Enabled &&\n                    behavior.Collider.hasCollided(b.Collider)\n                ) {\n                    collisions.push(b);\n\n                    if (!existingCollisions || existingCollisions.indexOf(b) < 0) {\n                        behavior.onCollisionEnter(b);\n                        b.onCollisionEnter(behavior);\n                    } else if (existingCollisions) {\n                        const index = existingCollisions.indexOf(b);\n                        if (index > -1) {\n                            existingCollisions.splice(index, 1);\n                        }\n                    }\n                }\n            }\n        });\n\n        if (existingCollisions && existingCollisions.length > 0) {\n            existingCollisions.forEach((b) => {\n                behavior.onCollisionLeave(b);\n                b.onCollisionLeave(behavior);\n            });\n        }\n\n        this.collisions[behavior.Id] = collisions;\n    }\n\n    private emitBehaviorStart(b: CanvasBehavior, context: CanvasRenderingContext2D) {\n        b.start(context);\n\n        b.onDragStart = (behavior: CanvasBehavior) => {\n            this.draggingItem = behavior;\n        }\n\n        b.onDragStop = (behavior: CanvasBehavior) => {\n            this.draggingItem = undefined;\n        }\n    }\n\n    public start(settings: CanvasGameSettings, context: CanvasRenderingContext2D): void {\n        this.context = context;\n        this.settings = settings;\n\n        this.behaviors = new Array<CanvasBehavior>();\n\n        this.init(context);\n\n        this.behaviors.forEach((b) => {\n            if (b instanceof CanvasBehavior) {\n                this.emitBehaviorStart(b, context);\n                if (b instanceof CanvasBehaviorGroup) {\n                    b.Behaviors.forEach((cb) => {\n                        this.emitBehaviorStart(cb, context);\n                    });\n                }\n            }\n        });\n    }\n\n    private emitBehaviorStop(b: CanvasBehavior, context: CanvasRenderingContext2D) {\n        b.stop(context);\n\n        b.onDragStart = (behavior: CanvasBehavior) => {}\n\n        b.onDragStop = (behavior: CanvasBehavior) => {}\n    }\n\n    public stop(context: CanvasRenderingContext2D): void {\n        this.behaviors.forEach((b) => {\n            if (b instanceof CanvasBehavior) {\n                this.emitBehaviorStop(b, context);\n                if (b instanceof CanvasBehaviorGroup) {\n                    b.Behaviors.forEach((cb) => {\n                        this.emitBehaviorStop(cb, context);\n                    });\n                }\n            }\n        });\n    }\n\n    private emitBehaviorUpdate(b: CanvasBehavior, context: CanvasRenderingContext2D) {\n        if (b.Visible) {\n            context.save();\n\n            b.update(context);\n            b.onUpdate(context, this.settings!);\n\n            b.onCursorChange = (cursor: string) => {\n                if (this.settings) {\n                    const canvas = document.getElementById(this.settings.canvasId) as HTMLCanvasElement;\n                    if (canvas) {\n                        canvas.style.cursor = cursor;\n                    }\n                }\n            }\n\n            this.emitCollisions(b);\n\n            context.restore();\n        }\n    }\n\n    public onUpdate(context: CanvasRenderingContext2D) {}\n\n    public update(context: CanvasRenderingContext2D) {\n        this.behaviors.forEach((b) => {\n            if (b instanceof CanvasBehavior) {\n                if (!b.IsDragging) {\n                    this.emitBehaviorUpdate(b, context);\n                }\n\n                if (b instanceof CanvasBehaviorGroup) {\n                    b.Behaviors.forEach((cb) => {\n                        if (!cb.IsDragging) {\n                            this.emitBehaviorUpdate(cb, context);\n                        }\n                    });\n                }\n            }\n        });\n\n        if (this.draggingItem) {\n            this.emitBehaviorUpdate(this.draggingItem, context);\n\n            if (this.draggingItem instanceof CanvasBehaviorGroup) {\n                this.draggingItem.Behaviors.forEach((c) => {\n                    this.emitBehaviorUpdate(c, context);\n                });\n            }\n        }\n\n        this.onUpdate(context);\n    }\n\n    private currentInAreaBehavior: CanvasBehavior | undefined;\n\n    private sendDraggingMouseEvents(behavior: CanvasBehavior, event: CanvaseMouseEvent) {\n        if (behavior.IsDragging) {\n            // // console.log(\"SENDING - \" + behavior.Id);\n            behavior.onMouse(event);\n            // behavior.onMoving(event);\n        }\n    }\n\n    public hasCollidedAtPoint(behavior: CanvasBehavior, x: number, y: number) : boolean {\n        return (\n            x >= behavior.Left &&\n            x <= (behavior.Left + behavior.Width) &&\n            y >= behavior.Top &&\n            y <= (behavior.Top + behavior.Height)\n        );\n    }\n\n    public onMouseEvent(event: CanvaseMouseEvent) {\n        // send to the the behavior to only where the mouse is in the area\n        let inAreaBehavior: CanvasBehavior | undefined;\n\n        if (this.draggingItem) {\n            this.sendDraggingMouseEvents(this.draggingItem, event);\n        }\n\n        this.behaviors.forEach((b) => {\n            if (b.Visible) {\n                if (b instanceof CanvasBehavior) {\n                    if (this.hasCollidedAtPoint(b, event.x, event.y)) {\n                        inAreaBehavior = b;\n                    }\n                    if (b instanceof CanvasBehaviorGroup) {\n                        b.Behaviors.forEach((cb) => {\n                            if (this.hasCollidedAtPoint(cb, event.x, event.y)) {\n                                    inAreaBehavior = cb;\n                                }\n                            }\n                        );\n                    }\n                }\n            }\n        });\n\n        if (inAreaBehavior) {\n            inAreaBehavior.onMouse(event);\n            if (inAreaBehavior.Id !== this.currentInAreaBehavior?.Id) {\n                if (this.currentInAreaBehavior && !this.currentInAreaBehavior.IsDragging) {\n                    this.currentInAreaBehavior.onLeave(event);\n\n                    if (this.settings) {\n                        const canvas = document.getElementById(this.settings.canvasId) as HTMLCanvasElement;\n                        if (canvas) {\n                            canvas.style.cursor = \"auto\";\n                        }\n                    }\n                }\n\n                this.currentInAreaBehavior = inAreaBehavior;\n                inAreaBehavior.onEnter(event);\n            }\n\n            inAreaBehavior = undefined;\n        } else if (this.currentInAreaBehavior && !this.currentInAreaBehavior.IsDragging) {\n            this.currentInAreaBehavior.onLeave(event);\n\n            if (this.settings) {\n                const canvas = document.getElementById(this.settings.canvasId) as HTMLCanvasElement;\n                if (canvas) {\n                    canvas.style.cursor = \"auto\";\n                }\n            }\n\n            this.currentInAreaBehavior = undefined;\n        }\n    }\n\n    public addBehavior(item: CanvasBehavior | CanvasBehaviorGroup) {\n        this.behaviors.push(item);\n    }\n\n    public clear() {\n        this.behaviors = new Array<CanvasBehavior>();\n    }\n\n    public changeScene(sceneId: string) {}\n    public pause() {}\n    public unPause() {}\n    public restart() {}\n}","export class CanvasBoxCollider {\n\n    private _enabled: boolean;\n    get Enabled(): boolean {\n        return this._enabled;\n    }\n    set Enabled(value: boolean) {\n        this._enabled = value;\n    }\n\n    private _left: number;\n    get Left(): number {\n        return this._left;\n    }\n    set Left(value: number) {\n        this._left = value;\n    }\n\n    private _top: number;\n    get Top(): number {\n        return this._top;\n    }\n    set Top(value: number) {\n        this._top = value;\n    }\n\n    private _width: number;\n    get Width(): number {\n        return this._width;\n    }\n    set Width(value: number) {\n        this._width = value;\n    }\n\n    private _height: number;\n    get Height(): number {\n        return this._height;\n    }\n    set Height(value: number) {\n        this._height = value;\n    }\n\n    constructor(left: number, top: number, width: number, height: number) {\n        this._enabled = true;\n        this._left = left;\n        this._top = top;\n        this._width = width;\n        this._height = height;\n    }\n\n    private checkCollisionPoints(c1: CanvasBoxCollider, c2: CanvasBoxCollider): boolean {\n        return this.hasCollidedAtPoint(c1, c2.Left, c2.Top) ||\n            this.hasCollidedAtPoint(c1, c2.Left, c2.Top + c2.Height) ||\n            this.hasCollidedAtPoint(c1, c2.Left + c2.Width, c2.Top) ||\n            this.hasCollidedAtPoint(c1, c2.Left + c2.Width, c2.Top + c2.Height);\n    }\n\n    private hasCollidedAtPoint(collider: CanvasBoxCollider, x: number, y: number) : boolean {\n        return (\n            x >= collider.Left &&\n            x <= (collider.Left + collider.Width) &&\n            y >= collider.Top &&\n            y <= (collider.Top + collider.Height)\n        );\n    }\n\n    public hasCollided(collider: CanvasBoxCollider): boolean {\n        return this.checkCollisionPoints(this, collider) ||\n            this.checkCollisionPoints(collider, this);\n    }\n}","import { CanvasBehaviorGroup } from \"../../scripts/canvasBehaviorGroup\";\nimport { CanvasBoxCollider } from \"../../scripts/canvasBoxCollider\";\nimport { Card } from \"./Card\";\nimport { Solitaire } from \"./Solitaire\";\n\nexport class CardStack extends CanvasBehaviorGroup {\n    get HasCards(): boolean {\n        return this.Behaviors.length > 0;\n    }\n\n    get NumberOfCards(): number {\n        return this.Behaviors.length;\n    }\n\n    private _isHighlighted: boolean = false;\n    get IsHighlighted(): boolean {\n        return this._isHighlighted;\n    }\n    set IsHighlighted(value: boolean) {\n        this._isHighlighted = value;\n    }\n\n    get TopCard(): Card | undefined {\n        if (this.Behaviors.length > 0) {\n            return this.Behaviors[this.Behaviors.length - 1] as Card;\n        }\n\n        return undefined;\n    }\n\n    constructor(id: string, top: number, left: number) {\n        super(id);\n        this.Top = top;\n        this.Left = left;\n        this.Width = Solitaire.cardWidth;\n        this.Height = Solitaire.cardHeight;\n\n        this.Collider = new CanvasBoxCollider(this.Left, this.Top, this.Width, this.Height);\n    }\n\n    public canAddCard(card: Card): boolean { return true; }\n\n    onUpdate(context: CanvasRenderingContext2D): void {};\n\n    update(context: CanvasRenderingContext2D): void {\n        this.roundedRect(context, this.Left, this.Top, this.Width, this.Height, 10);\n        context.fillStyle = \"transparent\";\n        context.fill();\n        context.strokeStyle = 'gray';\n        context.lineWidth = 1.2;\n        context.stroke();\n\n        if (this.IsHighlighted && this.Collider) {\n            this.roundedRect(context, this.Collider.Left - 4, this.Collider.Top - 4, this.Collider.Width + 8, this.Collider.Height + 8, 10);\n            context.fillStyle = \"transparent\";\n            context.fill();\n            context.strokeStyle = '#29ff3b';\n            context.setLineDash([5, 3]);\n            context.lineWidth = 3;\n            context.stroke();\n        }\n\n        if (Solitaire.isDebug) {\n            if (this.Collider && this.Collider.Enabled) {\n                context.globalAlpha = 0.3;\n                context.fillStyle = 'red';\n                context.fillRect(this.Collider.Left, this.Collider.Top, this.Collider.Width, this.Collider.Height);\n                context.globalAlpha = 1;\n            }\n\n            this.createText(context, `Cards ${this.Behaviors.length}`, 12, this.Left, this.Top - 10);\n            if (this.Collider) {\n                this.createText(context, `Collider (${Math.round(this.Collider.Left)}, ${Math.round(this.Collider.Top)}, ${this.Collider.Width}, ${this.Collider.Height})`, 8, this.Left, this.Top - 1);\n            }\n        }\n\n        this.onUpdate(context);\n    }\n\n    public drawCards(count: number, fromBotton: boolean): Array<Card> {\n        if (typeof count === 'undefined') count = 1;\n\n        var returnCards = new Array<Card>();\n\n        for (var i = count; i > 0; i--) {\n            if (this.Behaviors && this.Behaviors.length > 0) {\n                const card = (fromBotton ? this.Behaviors.shift() : this.Behaviors.pop()) as Card;\n                if (card) {\n                    returnCards.push(card);\n                }\n            }\n        }\n\n        this.onDrawCards(returnCards);\n\n        this.updateStack();\n\n        return returnCards;\n    }\n\n    addCard(card: Card) {\n\n        if (this.Behaviors.length > 0) {\n            const lastCard = this.Behaviors[this.Behaviors.length - 1];\n            if (lastCard instanceof Card) {\n                lastCard.NextCard = card;\n                card.PreviousCard = lastCard;\n                card.NextCard = undefined;\n            }\n        }\n\n        this.add(card);\n        this.updateStack();\n    }\n\n    addCards(cardStack: Array<Card>) {\n        cardStack.forEach((card) => {\n            this.addCard(card);\n        });\n    }\n\n    removeCards(cardStack: Array<Card>) {\n        cardStack.forEach((card) => {\n            this.removeCard(card);\n        });\n    }\n\n    removeCard(card: Card) {\n        this.remove(card);\n        this.updateStack();\n    }\n\n    onDrawCards(cards: Array<Card>) {}\n    updateStack() {}\n}","import { CardStack } from \"./CardStack\";\nimport { Card } from \"./Card\";\nimport { CanvasBehavior } from \"../../scripts/canvasBehavior\";\nimport { CanvasBehaviorGroup } from \"../../scripts/canvasBehaviorGroup\";\n\nexport class PlayStack extends CardStack {\n\n    private _isReady: boolean = false;\n    get IsReady(): boolean {\n        return this._isReady;\n    }\n    set IsReady(value: boolean) {\n        this._isReady = value;\n    }\n\n    public canAddCard(card: Card): boolean { \n        if (card.Group && card.Group.Id === this.Id) {\n            return false;\n        }\n\n        const topCard = this.TopCard;\n\n        // if there are no cards and the current card is a king\n        if (this.Behaviors.length === 0) {\n            return card.Rank === 13;\n        }\n\n        // check to stack by rank\n        if (topCard) {\n            return card.Rank === topCard.Rank - 1 && (topCard.IsRed !== card.IsRed);\n        }\n\n        return false;\n    }\n\n    onCollisionEnter(behavior: CanvasBehavior | CanvasBehaviorGroup): void {\n        // console.log(`${behavior.Id} ENTERING ${this.Id}`);\n\n        if (behavior instanceof Card) {\n            this.IsHighlighted = this.canAddCard(behavior);\n        }\n    };\n\n    onCollisionLeave(behavior: CanvasBehavior | CanvasBehaviorGroup): void {\n        // console.log(`${behavior.Id} LEAVING ${this.Id}`);\n\n        this.IsHighlighted = false;\n    };\n\n    updateStack() {\n        if (this.IsReady) {\n            if (this.TopCard) {\n                this.TopCard.IsDragable = true;\n                this.TopCard.IsFaceUp = true;\n            }\n\n            let colliderHeight = 0;\n            let colliderWidth = 0;\n\n            if (this.Collider) {\n                colliderHeight = this.Height;\n                colliderWidth = this.Width;\n            }\n\n            for (var i = 0; i < this.Behaviors.length; i++) {\n                const item = this.Behaviors[i];\n\n                if (item instanceof Card) {\n                    item.ParentStackIsPlay = true;\n                    item.PreviousCard = undefined;\n                    item.NextCard = undefined;\n                }\n\n                if (i > 0) {\n                    const prevItem = this.Behaviors[i - 1];\n                    if (item instanceof Card && prevItem instanceof Card) {\n                        const offset = prevItem.IsFaceUp ? 40 : 15;\n                        this.Behaviors[i].Top = prevItem.Top + offset;\n                        item.PreviousCard = prevItem;\n                    }\n                }\n\n                if (i < this.Behaviors.length - 1) {\n                    if (item instanceof Card) {\n                        const nextItem = this.Behaviors[i + 1];\n                        if (nextItem instanceof Card) {\n                            item.NextCard = nextItem;\n                        }\n                    }\n                }\n\n                if (this.Collider && item.Collider) {\n                    const testHeight = (item.Top - this._top) + this._height;\n                    if (testHeight > colliderHeight) {\n                        colliderHeight = testHeight;\n                    }\n\n                    const testWidth = (item.Left - this._left) + this._width;\n                    if (testWidth > colliderWidth) {\n                        colliderWidth = testWidth;\n                    }\n                }\n            }\n\n            if (this.Collider) {\n                this.Collider.Height = colliderHeight;\n                this.Collider.Width = colliderWidth;\n            }\n        }\n    }\n}","import { CanvasBehavior } from \"../../scripts/canvasBehavior\";\nimport { CanvasBehaviorGroup } from \"../../scripts/canvasBehaviorGroup\";\nimport { CanvasBoxCollider } from \"../../scripts/canvasBoxCollider\";\nimport { CanvaseMouseEvent } from \"../../scripts/canvasMouseEvent\";\nimport { CanvasPosition } from \"../../scripts/canvasPosition\";\nimport { CardStack } from \"./CardStack\";\nimport { PlayStack } from \"./PlayStack\";\nimport { Solitaire } from \"./Solitaire\";\nimport { SolitaireGame } from \"./SolitaireGame\";\n\nexport class Card extends CanvasBehaviorGroup {\n    private _suit: number;\n    get Suit(): number {\n        return this._suit;\n    }\n\n    private _rank: number;\n    get Rank(): number {\n        return this._rank;\n    }\n\n    private collisions: Array<CanvasBehavior>;\n\n    private _isFaceUp: boolean = false;\n    get IsFaceUp(): boolean {\n        return this._isFaceUp;\n    }\n    set IsFaceUp(value: boolean) {\n        this._isFaceUp = value;\n    }\n\n    get Description(): string {\n        let suitString = \"\";\n        switch(this._suit) {\n            case 1:\n                suitString = \"Clubs\";\n                break;\n            case 2:\n                suitString = \"Diamonds\";\n                break;\n            case 3:\n                suitString = \"Hearts\";\n                break;\n            case 4:\n                suitString = \"Spades\";\n                break;\n        }\n\n        let valueString = \"\";\n        switch(this._rank) {\n            case 11:\n                valueString = \"Jack\";\n                break;\n            case 12:\n                valueString = \"Queen\";\n                break;\n            case 13:\n                valueString = \"King\";\n                break;\n            case 14:\n                valueString = \"Ace\";\n                break;\n            default:\n                valueString = this._rank.toString();\n        }\n\n        return `${valueString} of ${suitString}`;\n    }\n\n    get IsAce(): boolean {\n        return this._rank === 14;\n    }\n\n    get IsRed(): boolean {\n        return this._suit === 2 || this._suit === 3;\n    }\n\n    get IsBlack(): boolean {\n        return this._suit === 1 || this._suit === 4;\n    }\n\n    private _previousCard: Card | undefined;\n    get PreviousCard(): Card | undefined {\n        return this._previousCard;\n    }\n    set PreviousCard(value: Card | undefined) {\n        this._previousCard = value;\n    }\n\n    private _nextCard: Card | undefined;\n    get NextCard(): Card | undefined {\n        return this._nextCard;\n    }\n    set NextCard(value: Card | undefined) {\n        this._nextCard = value;\n    }\n\n    private _parentStackIsPlay: boolean = false;\n    get ParentStackIsPlay(): boolean {\n        return this._parentStackIsPlay;\n    }\n    set ParentStackIsPlay(value: boolean) {\n        this._parentStackIsPlay = value;\n    }\n\n    constructor(id: string, suit: number, rank: number) {\n        super(id);\n\n        this.collisions = new Array<CanvasBehavior>();\n\n        this._suit = suit;\n        this._rank = rank;\n        this.Left = 0;\n        this.Top = 0;\n        this.Width = Solitaire.cardWidth;\n        this.Height = Solitaire.cardHeight;\n\n        this.Collider = new CanvasBoxCollider(this.Left, this.Top, this.Width, this.Height);\n        this.Collider.Enabled = false;\n    }\n\n    start(context: CanvasRenderingContext2D): void {};\n\n    stop(context: CanvasRenderingContext2D): void {};\n\n    onEnter(event: CanvaseMouseEvent) {\n        // console.log(\"ENTER \" + this.Id + ` (${this.Left},${this.Top},${this.Width},${this.Height})`);\n    }\n    \n    onLeave(event: CanvaseMouseEvent) {\n        // console.log(\"LEAVE \" + this.Id);\n    }\n\n    onClick(event: CanvaseMouseEvent) {\n        // // console.log(\"Click \" + this.Id);\n    }\n\n    private origPosition: CanvasPosition | undefined;\n    onDrag(event: CanvaseMouseEvent) {\n        this.origPosition = new CanvasPosition(this.Left, this.Top);\n\n        if (this.Collider) {\n            this.Collider.Enabled = true;\n        }\n\n        // // console.log(\"DRAG \"  + this.Id);\n\n        if (this.ParentStackIsPlay) {\n            let loopCard = this.NextCard;\n            while (loopCard) {\n                this.add(loopCard);\n                loopCard = loopCard.NextCard;\n            }\n        }\n    }\n\n    onDragging(event: CanvasPosition) {\n        let offset = 40;\n        this.Behaviors.forEach((b) => {\n            b.Left = event.x;\n            b.Top = event.y + offset;\n            offset = offset + 40;\n        });\n    }\n\n    onMove(event: CanvasPosition) {\n        let offset = 40;\n        if (this.ParentStackIsPlay) {\n            let loopCard = this.NextCard;\n            while (loopCard) {\n                loopCard.Left = event.x;\n                loopCard.Top = event.y + offset;\n                loopCard = loopCard.NextCard;\n                offset = offset + 40;\n            }\n        }\n    }\n\n    onMoving(event: CanvasPosition) {\n        let offset = 40;\n        this.Behaviors.forEach((b) => {\n            b.Left = event.x;\n            b.Top = event.y + offset;\n            offset = offset + 40;\n        });\n    }\n\n    onMoved() {\n        this.reset();\n    }\n\n    onDrop(event: CanvaseMouseEvent) {\n        let lastCollision = undefined;\n\n        if (this.Collider) {\n            this.Collider.Enabled = false;\n        }\n\n        if (this.collisions.length > 0) {\n            lastCollision = this.collisions[this.collisions.length - 1];\n        }\n\n        if (lastCollision &&\n            lastCollision instanceof CardStack &&\n            lastCollision.canAddCard(this)) {\n            \n            let cardsToAdd = new Array<Card>();\n            cardsToAdd.push(this);\n\n            if (this.Group &&\n                this.Group instanceof CardStack) {\n\n                if (this.Group instanceof PlayStack) {\n                    let loopCard = this.NextCard;\n                    while (loopCard) {\n                        cardsToAdd.push(loopCard);\n                        loopCard = loopCard.NextCard;\n                    }\n                }\n                \n                this.Group.removeCards(cardsToAdd);\n                lastCollision.addCards(cardsToAdd);\n            }\n\n            SolitaireGame.Moves = SolitaireGame.Moves + 1;\n        } else {\n            if (this.origPosition) {\n                this.moveTo(this.origPosition, 60);\n                this.origPosition = undefined;\n            }\n        }\n\n        this.collisions = new Array<CanvasBehavior>();\n\n        this.reset();\n\n        // // console.log(\"CARD DROP\"  + this.Id);\n    }\n\n    onCollisionEnter(behavior: CanvasBehavior): void {\n        // // console.log(\"CARD ENTER: \" + behavior.Id);\n\n        const collisionIndex = this.collisions.indexOf(behavior);\n        if (collisionIndex >= 0) {\n            this.collisions.splice(collisionIndex, 1);\n        }\n\n        this.collisions.push(behavior);\n    };\n\n    onCollisionLeave(behavior: CanvasBehavior): void {\n        // // console.log(\"CARD LEAVE: \" + behavior.Id);\n\n        const collisionIndex = this.collisions.indexOf(behavior);\n        if (collisionIndex >= 0) {\n            this.collisions.splice(collisionIndex, 1);\n        }\n    };\n\n    update(context: CanvasRenderingContext2D): void {\n        const img = document.getElementById(this.IsFaceUp ? this.Id : \"card-back\") as CanvasImageSource;\n        if (img) {\n            context.drawImage(img, this.Left, this.Top, this.Width, this.Height);\n        }\n\n        if (Solitaire.isDebug && this.Collider && this.Collider.Enabled) {\n            context.globalAlpha = 0.3;\n            context.fillStyle = 'red';\n            context.fillRect(this.Collider.Left, this.Collider.Top, this.Collider.Width, this.Collider.Height);\n            context.globalAlpha = 1;\n            this.createText(context, `(${Math.round(this.Collider.Left)}, ${Math.round(this.Collider.Top)}, ${this.Collider.Width}, ${this.Collider.Height})`, 8, this.Left, this.Top + this.Height + 10);\n        }\n\n        if (Solitaire.isDebug) {\n            this.createText(context, `${this.Description}`, 10, this.Left + 20, this.Top + 10);\n            this.createText(context, `P: ${this.PreviousCard?.Description}`, 8, this.Left + 20, this.Top + 20);\n            this.createText(context, `N: ${this.NextCard?.Description}`, 8, this.Left + 20, this.Top + 30);\n        }\n    }\n\n\n    public flip() {\n        this._isFaceUp = !this._isFaceUp;\n    }\n}","import { CardStack } from \"./CardStack\";\nimport { Card } from \"./Card\";\nimport { CanvaseMouseEvent } from \"../../scripts/canvasMouseEvent\";\nimport { SolitaireGame } from \"./SolitaireGame\";\n\nexport class DrawStack extends CardStack {\n    public canAddCard(card: Card): boolean { return false; }\n\n    public draw() {\n        this.drawCards(3, false);\n        SolitaireGame.Moves = SolitaireGame.Moves + 1;\n    }\n\n    onUpdate(context: CanvasRenderingContext2D): void {\n        const squareWidth = this.Width - 40;\n        this.roundedRect(context, this.Left + ((this.Width - squareWidth) / 2), this.Top + ((this.Height - squareWidth) / 2), squareWidth, squareWidth, squareWidth/ 2);\n        context.globalAlpha = 0.2;\n        context.fillStyle = \"transparent\";\n        context.fill();\n        context.strokeStyle = 'white';\n        context.lineWidth = 9;\n        context.stroke();\n        context.globalAlpha = 1;\n    };\n\n    updateStack() {\n        if (this.Behaviors.length > 0) {\n            const topCard = this.Behaviors[this.Behaviors.length - 1];\n            if (topCard) {\n                topCard.Visible = true;\n                topCard.IsClickable = true;\n                topCard.onClick = (event: CanvaseMouseEvent) => {\n                    this.draw();\n                }\n            }\n        }\n    }\n}","import { CardStack } from \"./CardStack\";\nimport { Card } from \"./Card\";\nimport { CanvaseMouseEvent } from \"../../scripts/canvasMouseEvent\";\n\nexport class PickStack extends CardStack {\n    public canAddCard(card: Card): boolean { return false; }\n\n    updateStack() {\n        this.Behaviors.forEach((b) => {\n            if (b.Id !== \"pick-stack\") {\n                const card = b as Card;\n                if (card) {\n                    card.Left = this.Left;\n                    card.Visible = false;\n                    card.IsFaceUp = false;\n                    card.IsClickable = false;\n                    card.IsDragable = false;\n                    card.onClick = function(event: CanvaseMouseEvent) {}\n                }\n            }\n        });\n\n        // fan out top cards\n        if (this.Behaviors.length > 0) {\n            let startIndex = this.Behaviors.length - 3;\n\n            if (startIndex < 0) {\n                startIndex = 0;\n            }\n\n            for (var i = startIndex; i < this.Behaviors.length; i++) {\n                const card = this.Behaviors[i] as Card;\n                card.Visible = true;\n                card.IsFaceUp = true;\n                card.IsDragable = i === (this.Behaviors.length - 1);\n                card.Left = card.Left + (23 * (i - startIndex));\n            }\n        }\n    }\n}","import { CardStack } from \"./CardStack\";\nimport { Card } from \"./Card\";\nimport { CanvasBehavior } from \"../../scripts/canvasBehavior\";\nimport { CanvasBehaviorGroup } from \"../../scripts/canvasBehaviorGroup\";\n\nexport class AceStack extends CardStack {\n    private suit: number | undefined;\n    get Suit(): number | undefined {\n        return this.suit;\n    }\n    set Suit(value: number | undefined) {\n        this.suit = value;\n    }\n\n    public isCompleteStack(): boolean {\n        if (this.Behaviors.length > 0) {\n            const topCard = this.Behaviors[this.Behaviors.length - 1];\n            if (topCard instanceof Card) {\n                // success when there is a king\n                return topCard.Rank === 13;\n            }\n        }\n\n        return false;\n    }\n\n    public canAddCard(card: Card): boolean { \n        // if the deck is empty and the card is an ace\n        if (this.Behaviors.length === 0 &&\n            this.suit === card.Suit &&\n            card.IsAce) {\n            this.suit = card.Suit;\n            return true; \n        }\n\n        if (this.suit &&\n            card.Suit === this.suit) {\n            const topCard = this.TopCard;\n\n            // if top card is Ace then the next card has to be a 2\n            if (topCard) {\n                return (topCard.IsAce && card.Rank === 2) ||\n                (topCard.Rank + 1 === card.Rank);\n            }\n        }\n\n        return false;\n    }\n\n    onUpdate(context: CanvasRenderingContext2D): void {\n        if (!this.HasCards && this.suit) {\n            const img = document.getElementById(`${this.suit}-14-stack`) as CanvasImageSource;\n            if (img) {\n                context.globalAlpha = 0.1;\n                context.drawImage(img, this.Left, this.Top, this.Width, this.Height);\n                context.globalAlpha = 1;\n            }\n        }\n    };\n\n    updateStack() {\n        this.Behaviors.forEach((b) => {\n            b.IsDragable = false;\n            b.IsClickable = false;\n            b.Visible = false;\n        });\n\n        if (this.TopCard) {\n            this.TopCard.Visible = true;\n        }\n    }\n\n    onCollisionEnter(behavior: CanvasBehavior | CanvasBehaviorGroup): void {\n        // console.log(`${behavior.Id} ENTERING ${this.Id}`);\n\n        if (behavior instanceof Card) {\n            this.IsHighlighted = this.canAddCard(behavior);\n        }\n    };\n\n    onCollisionLeave(behavior: CanvasBehavior | CanvasBehaviorGroup): void {\n        // console.log(`${behavior.Id} LEAVING ${this.Id}`);\n\n        this.IsHighlighted = false;\n    };\n}","import { CanvasBehavior } from \"../../scripts/canvasBehavior\";\n\nexport class RestartButton extends CanvasBehavior {\n\n    start(context: CanvasRenderingContext2D): void {\n\n    }\n\n    stop(context: CanvasRenderingContext2D): void {\n\n    }\n\n    update(context: CanvasRenderingContext2D): void {\n        const img = document.getElementById(\"play\") as CanvasImageSource;\n        if (img) {\n            context.drawImage(img, this.Left, this.Top, this.Width, this.Height);\n        }\n    }\n\n}","import { CanvasGameSettings } from \"../../scripts/canvasGameSettings\";\nimport { CanvaseMouseEvent } from \"../../scripts/canvasMouseEvent\";\nimport { CanvasScene } from \"../../scripts/canvasScene\";\nimport { Card } from \"./Card\";\nimport { Solitaire } from \"./Solitaire\";\nimport { DrawStack } from \"./DrawStack\";\nimport { PickStack } from \"./PickStack\";\nimport { AceStack } from \"./AceStack\";\nimport { PlayStack } from \"./PlayStack\";\nimport { RestartButton } from \"./RestartButton\";\nexport class SolitaireGame extends CanvasScene {\n\n    private leftMargin = 25;\n    private topMargin = 50;\n    private columnMargin = 10;\n    private rowMargin = 25;\n\n    private drawStack: DrawStack | undefined;\n    private pickStack: PickStack | undefined;\n\n    private aceStack1: AceStack | undefined;\n    private aceStack2: AceStack | undefined;\n    private aceStack3: AceStack | undefined;\n    private aceStack4: AceStack | undefined;\n\n    private stack1: PlayStack | undefined;\n    private stack2: PlayStack | undefined;\n    private stack3: PlayStack | undefined;\n    private stack4: PlayStack | undefined;\n    private stack5: PlayStack | undefined;\n    private stack6: PlayStack | undefined;\n    private stack7: PlayStack | undefined;\n\n    private playStacks: Array<PlayStack> | undefined;\n\n    public static Moves: number = 0;\n    public static TotalSeconds: number = 0;\n\n    private isPaused: boolean = false;\n    private interval: NodeJS.Timeout | undefined;\n\n    constructor(settings: CanvasGameSettings) {\n        super(\"game\");\n\n        this.settings = settings;\n    }\n\n    init(context: CanvasRenderingContext2D): void {\n\n        // ACE Stacks\n\n        this.aceStack1 = new AceStack(\n            \"ace-stack-1\",\n            this.getRowPosition(1),\n            this.getColumnPosition(4)\n            );\n        this.aceStack1.Suit = 1;\n        this.addBehavior(this.aceStack1);\n\n        this.aceStack2 = new AceStack(\n            \"ace-stack-2\",\n            this.getRowPosition(1),\n            this.getColumnPosition(5)\n            );\n        this.aceStack2.Suit = 2;\n        this.addBehavior(this.aceStack2);\n        \n        this.aceStack3 = new AceStack(\n            \"ace-stack-3\",\n            this.getRowPosition(1),\n            this.getColumnPosition(6)\n            );\n        this.aceStack3.Suit = 3;\n        this.addBehavior(this.aceStack3);\n\n        this.aceStack4 = new AceStack(\n            \"ace-stack-4\",\n            this.getRowPosition(1),\n            this.getColumnPosition(7)\n            );\n        this.aceStack4.Suit = 4;\n        this.addBehavior(this.aceStack4);\n\n        // PLAY stacks\n        this.playStacks = new Array<PlayStack>();\n\n        this.stack1 = new PlayStack(\n            \"stack-1\",\n            this.getRowPosition(2),\n            this.getColumnPosition(1));\n        this.addBehavior(this.stack1);\n        this.playStacks.push(this.stack1);\n\n        this.stack2 = new PlayStack(\n            \"stack-2\",\n            this.getRowPosition(2),\n            this.getColumnPosition(2));\n        this.addBehavior(this.stack2);\n        this.playStacks.push(this.stack2);\n\n        this.stack3 = new PlayStack(\n            \"stack-3\",\n            this.getRowPosition(2),\n            this.getColumnPosition(3));\n        this.addBehavior(this.stack3);\n        this.playStacks.push(this.stack3);\n\n        this.stack4 = new PlayStack(\n            \"stack-4\",\n            this.getRowPosition(2),\n            this.getColumnPosition(4));\n        this.addBehavior(this.stack4);\n        this.playStacks.push(this.stack4);\n\n        this.stack5 = new PlayStack(\n            \"stack-5\",\n            this.getRowPosition(2),\n            this.getColumnPosition(5));\n        this.addBehavior(this.stack5);\n        this.playStacks.push(this.stack5);\n\n        this.stack6 = new PlayStack(\n            \"stack-6\",\n            this.getRowPosition(2),\n            this.getColumnPosition(6));\n        this.addBehavior(this.stack6);\n        this.playStacks.push(this.stack6);\n\n        this.stack7 = new PlayStack(\n            \"stack-7\",\n            this.getRowPosition(2),\n            this.getColumnPosition(7));\n        this.addBehavior(this.stack7);\n        this.playStacks.push(this.stack7);\n\n        this.drawStack = new DrawStack(\n            \"draw-stack\",\n            this.getRowPosition(1),\n            this.getColumnPosition(1));\n        this.drawStack.IsClickable = true;\n        this.drawStack.onClick = (event: CanvaseMouseEvent) => {\n            const cards = this.pickStack!.drawCards(this.pickStack!.NumberOfCards, false);\n\n            cards.forEach((card) => {\n                card.IsFaceUp = false;\n                card.IsDragable = false;\n            });\n\n            this.drawStack!.addCards(cards);\n        }\n\n        this.drawStack.onDrawCards = (cards: Array<Card>) => {\n            this.pickStack!.addCards(cards);\n        }\n\n        this.addBehavior(this.drawStack);\n\n        this.pickStack = new PickStack(\n            \"pick-stack\",\n            this.getRowPosition(1),\n            this.getColumnPosition(2));\n        this.addBehavior(this.pickStack);\n\n\n        const restartButton = new RestartButton(\"restart-button\");\n        restartButton.Left = Solitaire.gameWidth - 75;\n        restartButton.Top = 8;\n        restartButton.Width = 35;\n        restartButton.Height = 35;\n        restartButton.IsClickable = true;\n        restartButton.onClick = (event: CanvaseMouseEvent) => {\n            this.restart();\n        }\n        this.addBehavior(restartButton);\n\n        let cards = new Array<Card>();\n\n        for (var suit = 4; suit > 0; suit--) {\n            for (var rank = 14; rank > 1; rank--) {\n                const card = new Card(`card-${suit}-${rank}`, suit, rank);\n                card.Visible = false;\n                cards.push(card);\n            }\n        }\n        this.shuffle(cards);\n\n        // add the initial play stack cards\n        let startStackIndex = 0;\n        while (startStackIndex < this.playStacks.length) {\n            for (var i = startStackIndex; i < this.playStacks.length; i++) {\n                const card = cards.pop();\n                if (card) {\n                    card.IsFaceUp = false;\n                    card.Visible = true;\n                    this.playStacks[i].addCard(card);\n                }\n            }\n\n            startStackIndex = startStackIndex + 1;\n        }\n\n        // flip the top card of each play stack\n        this.playStacks.forEach((stack) => {\n            stack.IsReady = true;\n            stack.updateStack();\n        });\n\n        // add the rest of the cards to the draw stack\n        this.drawStack.addCards(cards);\n\n        this.drawStack.draw();\n\n        SolitaireGame.Moves = 0;\n        SolitaireGame.TotalSeconds = 0;\n\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = undefined;\n        }\n\n        this.interval = setInterval(this.updateTimer, 1000);\n    }\n\n    private getColumnPosition(position: number): number {\n        return this.leftMargin + ((position - 1) * (Solitaire.cardWidth + this.columnMargin));\n    }\n\n    private getRowPosition(position: number): number {\n        return this.topMargin + ((position - 1) * (Solitaire.cardHeight + this.rowMargin));\n    }\n\n    private shuffle(array: Array<Card>) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    private getTimerDisplay(): string {\n        const seconds = (SolitaireGame.TotalSeconds % 60);\n        const minutes = Math.round(SolitaireGame.TotalSeconds / 60);\n        return `${minutes < 10 ? '0':''}${minutes}:${seconds < 10 ? '0':''}${seconds}`;\n    }\n\n    private gameWon(context: CanvasRenderingContext2D) {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n\n        if (this.settings) {\n            const dialogWidthSize = 300;\n            const dialogHeightSize = 200\n            const dialogLeft = (this.settings.playAreaWidth - dialogWidthSize) / 2\n            const dialogTop = (this.settings.playAreaHeight - dialogHeightSize) / 2\n            context.fillStyle = \"gray\"\n            context.fillRect(\n                dialogLeft,\n                dialogTop,\n                dialogWidthSize, dialogHeightSize);\n            \n            context.beginPath();\n            context.rect(\n                dialogLeft,\n                dialogTop,\n                dialogWidthSize, dialogHeightSize);\n            context.lineWidth = 2;\n            context.stroke();\n\n            const clockImg = document.getElementById(\"clock\") as CanvasImageSource;\n            if (clockImg) {\n                context.drawImage(\n                    clockImg,\n                    dialogLeft + 50,\n                    dialogTop + 25,\n                    50,\n                    50);\n            }\n    \n            context.font = `40px Arial`;\n            context.fillStyle = \"black\";\n            context.fillText(\n                this.getTimerDisplay(),\n                dialogLeft + 110,\n                dialogTop + 63);\n    \n            \n            const movesImg = document.getElementById(\"moves\") as CanvasImageSource;\n            if (movesImg) {\n                context.drawImage(\n                    movesImg,                    \n                    dialogLeft + 50,\n                    dialogTop + 100,\n                    50,\n                    50);\n            }\n    \n            \n            context.font = `40px Arial`;\n            context.fillStyle = \"black\";\n            context.fillText(\n                `${SolitaireGame.Moves}`,\n                dialogLeft + 110,\n                dialogTop + 140);\n            \n            \n        }\n    }\n\n    public onUpdate(context: CanvasRenderingContext2D) {\n        if (\n            this.aceStack1!.isCompleteStack() &&\n            this.aceStack2!.isCompleteStack() &&\n            this.aceStack3!.isCompleteStack() &&\n            this.aceStack4!.isCompleteStack()\n        ) {\n            this.gameWon(context);\n            return;\n        }\n\n        const clockImg = document.getElementById(\"clock\") as CanvasImageSource;\n        if (clockImg) {\n            context.drawImage(clockImg, 25, 10, 25, 25);\n        }\n\n        context.font = `20px Arial`;\n        context.fillStyle = \"black\";\n        context.fillText(this.getTimerDisplay(), 55, 30);\n\n        const movesImg = document.getElementById(\"moves\") as CanvasImageSource;\n        if (movesImg) {\n            context.drawImage(movesImg, 115, 10, 25, 25);\n        }\n\n        context.font = `20px Arial`;\n        context.fillStyle = \"black\";\n        context.fillText(`${SolitaireGame.Moves}`, 145, 30);\n    }\n\n    private updateTimer() {\n        SolitaireGame.TotalSeconds = SolitaireGame.TotalSeconds + 1;\n    }\n\n    public unPause = () => {\n        this.isPaused = false;\n\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n\n        this.interval = setInterval(this.updateTimer, 1000);\n    }\n\n    public pause = () => {\n        this.isPaused = true;\n\n        if (this.interval) {\n            clearInterval(this.interval);\n        } \n    }\n}","import { CanvasGame } from \"../../scripts/canvasGame\";\nimport { CanvasGameSettings } from \"../../scripts/canvasGameSettings\";\nimport { SolitaireGame } from \"./SolitaireGame\";\n\nexport class Solitaire extends CanvasGame {\n\n    public static isDebug: boolean = false;\n\n    public static gameWidth: number = 1000;\n    public static gameHeight: number = 800;\n\n    public static cardWidth: number = 125;\n    public static cardHeight: number = 175;\n\n    constructor() {\n        const settings = new CanvasGameSettings(\"canvas\", Solitaire.gameWidth, Solitaire.gameHeight, true, \"#59C551\");\n        super(settings, [\n            // new TestScene(settings),\n            new SolitaireGame(settings),\n            // new FinishedGame(settings)\n        ], \"game\");\n\n        this.loadCardImages();\n    }\n\n    private addImage(path: string, id: string) {\n        let images = document.getElementById(\"cards\");\n        let img = new Image();\n        img.id = id;\n        img.src = path;\n\n        if (images) {\n            images.appendChild(img);\n        }\n    }\n\n    loadCardImages() {\n        let cards = document.getElementById(\"cards\");\n        \n        // cardback\n        let img = new Image();\n        img.id = `card-back`;\n        img.src = `./images/cards/0.svg`;\n        cards?.appendChild(img);\n\n        // ace stack placeholders\n        let ace1 = new Image();\n        ace1.id = `1-14-stack`;\n        ace1.src = `./images/cards/1-14-stack.svg`;\n        cards?.appendChild(ace1);\n\n        let ace2 = new Image();\n        ace2.id = `2-14-stack`;\n        ace2.src = `./images/cards/2-14-stack.svg`;\n        cards?.appendChild(ace2);\n\n        let ace3 = new Image();\n        ace3.id = `3-14-stack`;\n        ace3.src = `./images/cards/3-14-stack.svg`;\n        cards?.appendChild(ace3);\n\n        let ace4= new Image();\n        ace4.id = `4-14-stack`;\n        ace4.src = `./images/cards/4-14-stack.svg`;\n        cards?.appendChild(ace4);\n\n        this.addImage('./images/cards/clock.svg', 'clock');\n        this.addImage('./images/cards/moves.svg', 'moves');\n        this.addImage('./images/cards/play.svg', 'play');\n\n        if (cards) {\n            for (var suit = 4; suit > 0; suit--) {\n                for (var rank = 14; rank > 1; rank--) {\n                    let img = new Image();\n                    img.id = `card-${suit}-${rank}`;\n                    img.src = `./images/cards/${suit}-${rank}.svg`;\n\n                    cards.appendChild(img);\n                }\n            }\n        }\n    }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport { Solitaire } from '../objects/Solitaire/Solitaire';\n\n/**\n * The 'PersonalTab' component renders the main tab content\n * of your app.\n */\nclass Tab extends React.Component<any, any> {\n\n  private solitaire: Solitaire;\n\n  constructor(props: any){\n    super(props);\n\n    this.solitaire = new Solitaire();\n    \n    this.state = {\n    }\n  }\n\n  private updateTheme = (themeStr?: string | null): void => {\n\n  }\n\n  private beforeUnload = (readyToUnload: ()=> void): boolean => {\n    this.solitaire.pause();\n    readyToUnload();\n    return true;\n  }\n\n  //React lifecycle method that gets called once a component has finished mounting\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidmount\n  componentDidMount(){\n    // Get the user context from Teams and set it in the state\n    microsoftTeams.getContext((context: microsoftTeams.Context) => {\n      this.setState({\n        context: context\n      });\n    });\n\n    this.solitaire.start();\n    \n    microsoftTeams.registerOnThemeChangeHandler(this.updateTheme);\n\n    microsoftTeams.registerBeforeUnloadHandler(this.beforeUnload);\n  \n    microsoftTeams.registerOnLoadHandler(() => {\n      this.solitaire.unPause();\n      microsoftTeams.appInitialization.notifyAppLoaded();\n    });\n  }\n\n  render() {\n      return (\n      <div>\n        <canvas id=\"canvas\"></canvas>\n      </div>\n      );\n  }\n}\nexport default Tab;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport './App.css';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Privacy from \"./Privacy\";\nimport TermsOfUse from \"./TermsOfUse\";\nimport Tab from \"./Tab\";\n\n/**\n * The main app which handles the initialization and routing\n * of the app.\n */\nfunction App() {\n\n  // Initialize the Microsoft Teams SDK\n  microsoftTeams.initialize();\n\n  // Display the app home page hosted in Teams\n  return (\n    <Tab />\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}